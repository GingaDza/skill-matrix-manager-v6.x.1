#!/usr/bin/env python3
"""初期設定タブの実装"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                           QLineEdit, QPushButton, QListWidget, QInputDialog, 
                           QMessageBox, QTabWidget, QGroupBox, QFormLayout)
import sys
from src.skill_matrix_manager.utils.debug_logger import DebugLogger
from src.skill_matrix_manager.database import SkillMatrixDatabase

logger = DebugLogger.get_logger()

class SettingsTab(QWidget):
    """初期設定タブ"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        
    def setup_ui(self):
        """UI要素のセットアップ"""
        main_layout = QHBoxLayout()
        self.setLayout(main_layout)
        
        # グループ管理
        group_box = QGroupBox("グループ管理")
        group_layout = QVBoxLayout()
        group_box.setLayout(group_layout)
        
        # グループリスト
        self.group_list = QListWidget()
        group_layout.addWidget(self.group_list)
        
        # グループ操作ボタン
        group_btn_layout = QHBoxLayout()
        
        self.add_group_btn = QPushButton("追加")
        self.add_group_btn.clicked.connect(self.add_group)
        group_btn_layout.addWidget(self.add_group_btn)
        
        self.edit_group_btn = QPushButton("編集")
        self.edit_group_btn.clicked.connect(self.edit_group)
        group_btn_layout.addWidget(self.edit_group_btn)
        
        self.delete_group_btn = QPushButton("削除")
        self.delete_group_btn.clicked.connect(self.delete_group)
        group_btn_layout.addWidget(self.delete_group_btn)
        
        group_layout.addLayout(group_btn_layout)
        
        main_layout.addWidget(group_box)
        
        # スキル管理
        skill_box = QGroupBox("スキル管理")
        skill_layout = QVBoxLayout()
        skill_box.setLayout(skill_layout)
        
        # スキルリスト
        self.skill_list = QListWidget()
        skill_layout.addWidget(self.skill_list)
        
        # スキル操作ボタン
        skill_btn_layout = QHBoxLayout()
        
        add_skill_btn = QPushButton("追加")
        add_skill_btn.clicked.connect(self.add_skill)
        skill_btn_layout.addWidget(add_skill_btn)
        
        edit_skill_btn = QPushButton("編集")
        edit_skill_btn.clicked.connect(self.edit_skill)
        skill_btn_layout.addWidget(edit_skill_btn)
        
        delete_skill_btn = QPushButton("削除")
        delete_skill_btn.clicked.connect(self.delete_skill)
        skill_btn_layout.addWidget(delete_skill_btn)
        
        skill_layout.addLayout(skill_btn_layout)
        
        main_layout.addWidget(skill_box)
        
        # データベースからグループ一覧を取得
        self.load_groups()
        self.load_skills()
    
    def load_groups(self):
        """グループ一覧をロード"""
        try:
            self.group_list.clear()
            db = SkillMatrixDatabase()
            db.connect()
            groups = db.get_groups()
            db.close()
            
            for group in groups:
                self.group_list.addItem(group)
                
        except Exception as e:
            logger.error(f"グループロードエラー: {e}")
    
    def load_skills(self):
        """スキル一覧をロード"""
        try:
            self.skill_list.clear()
            # データベースからスキル一覧を取得する処理（実装予定）
        except Exception as e:
            logger.error(f"スキルロードエラー: {e}")
    
    def add_group(self):
        """グループ追加"""
        group_name, ok = QInputDialog.getText(self, "グループ追加", "グループ名:")
        if ok and group_name:
            try:
                # データベースにグループを追加
                db = SkillMatrixDatabase()
                db.connect()
                db.add_group_if_not_exists(group_name)
                db.close()
                
                # リストに追加
                self.group_list.addItem(group_name)
                logger.info(f"グループ {group_name} を追加しました")
                
                # メインウィンドウ更新
                self.update_main_window()
                
            except Exception as e:
                logger.error(f"グループ追加エラー: {e}")
                QMessageBox.warning(self, "エラー", f"グループの追加に失敗しました: {e}")
    
    def edit_group(self):
        """グループ編集"""
        current_item = self.group_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "警告", "編集するグループを選択してください")
            return
            
        current_name = current_item.text()
        new_name, ok = QInputDialog.getText(
            self, "グループ名編集", "新しいグループ名:", text=current_name)
            
        if ok and new_name and new_name != current_name:
            try:
                # データベース更新
                db = SkillMatrixDatabase()
                db.connect()
                db.execute(
                    "UPDATE members SET group_name = ? WHERE group_name = ?",
                    (new_name, current_name)
                )
                db.close()
                
                # リストアイテム更新
                self.group_list.currentItem().setText(new_name)
                logger.info(f"グループ名を {new_name} に変更しました")
                
                # メインウィンドウ更新
                self.update_main_window()
                
            except Exception as e:
                logger.error(f"グループ編集エラー: {e}")
                QMessageBox.warning(self, "エラー", f"グループの編集に失敗しました: {e}")
    
    def delete_group(self):
        """グループ削除"""
        current_item = self.group_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, "警告", "削除するグループを選択してください")
            return
            
        group_name = current_item.text()
        reply = QMessageBox.question(
            self, "確認", f"グループ '{group_name}' を削除してもよろしいですか？",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                # データベース更新
                db = SkillMatrixDatabase()
                db.connect()
                db.execute(
                    "UPDATE members SET group_name = NULL WHERE group_name = ?",
                    (group_name,)
                )
                db.close()
                
                # リストから削除
                row = self.group_list.row(current_item)
                self.group_list.takeItem(row)
                logger.info("グループを削除しました")
                
                # メインウィンドウ更新
                self.update_main_window()
                
            except Exception as e:
                logger.error(f"グループ削除エラー: {e}")
                QMessageBox.warning(self, "エラー", f"グループの削除に失敗しました: {e}")
    
    def add_skill(self):
        """スキル追加"""
        pass  # 実装予定
    
    def edit_skill(self):
        """スキル編集"""
        pass  # 実装予定
    
    def delete_skill(self):
        """スキル削除"""
        pass  # 実装予定
    
    def update_main_window(self):
        """メインウィンドウに変更を通知"""
        try:
            # ルートウィンドウを取得
            root = self.parent()
            while root.parent():
                root = root.parent()
            
            # グループコンボボックス更新
            if hasattr(root, "update_group_combo"):
                logger.info("メインウィンドウのグループコンボボックス更新を呼び出し")
                root.update_group_combo()
        except Exception as e:
            logger.error(f"メインウィンドウ更新エラー: {e}")
